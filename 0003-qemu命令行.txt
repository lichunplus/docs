编译：
#cd build/ && ../configure --target-list=x86_64-softmmu --disable-slirp --disable-glusterfs --disable-smartcard
#make -j4
#scp -r pc-bios/ qemu-system-x86_64 172.20.101.65:/opt
# novnc_server | ./qemu-system-x86_64
#WEB访问ip:6080


OPTIONS
-name
    *guest=string      虚机名称显示在BIOS界面
    process=string     进程名称，显示在top中
    debug-threads=off  各线程名称，仅用于调试
    
-accel accelerator(旧接口，见-machine)
    选择加速器类型("-accel ?"列出支持的类型)
    kvm: QEMU运行linux系统上，激活kvm后使用硬件虚拟化特性
    xen: I型虚拟化,早期比较流行
    hax: QEMU运行windows系统上，激活hax后使用硬件虚拟化特性
    hvf: QEMU运行macOS系统上激活hvf后使用硬件虚拟化特性
    whpx: Windows Hypervisor Platform accelerator (WHPX)
    tcg: Tiny Code Generator
-machine [type=]name[,prop=value[,...]]
    选择机器类型和属性 ("-machine ?" 列出支持的类型)
    例1：-machine pc-i440fx-2.9,? 列出对应类型支持的属性
    例2：-machine pc-i440fx-2.5,accel=kvm,tcg,usb=off,dump-guest-core=off
    
-cpu model
    选择CPU模型与特性 ("-cpu ?" 列出支持的模型和特性,见origin/qemu/QEMU设备树.txt)
    例：-cpu Haswell,msr,fpt=on,kvmclock=off,hv_spinlocks=0x1fff
    特性列表：
    - tsc(Time Stamp Counter): 自Pentium之后, X86维护64位寄存器(RDTSC指令读取)计数自CPU复位以来的时钟周期次数
                               其频率无法预知(CPU复位后易变，受CPU节能影响)，
                               进程只有固定在个特定的CPU上运行，程序才能获得可靠的结果.
                               内核用它作时钟源，启动阶段由内核探测主CPU(使用CPU标称频率有较大误差)
                               [root@centos docs]# dmesg | grep tsc
                               [    0.000000] tsc: Detected 3192.002 MHz processor
    - invtsc(BSD::Invariant TSC, Linux::constant_tsc): 表示TSC计数不再受任何CPU状态(ACPI P-, C-. and T.)影响
                                                       具备invtsc意味着OS可以使用TSC作为WALL-CLOCK(替代ACPI or HPET)
    - rdtscp: 
              早期计算my_code执行时间==>rdtsc->my_code->rdtsc处理器可能这样执行rdtsc->rdtsc->my_code(Pentium Pro后引入乱序执行)
              解决方法一：引入有序指令cpuid, 改为==>cpuid->rdtsc->my_code->rdtsc->cpuid
              解决方法二：硬件引入rdtscp特性(rdtscp指令)，rdtscp->my_code->rdtscp


    备注：特性并不一定全部体现在/proc/cpuinfo文件中，比如kvmclock
    
-smp n[,cores=cores][,threads=threads][,sockets=sockets][,maxcpus=maxcpus]
    指定仿真SMP系统的类型n=cores*threads*sockets
    sockets=sockets指示总共有多个sockets
    cores=cores指示一个socket下有多个cores
    threads=threads指示一个cores下有多个threads
    maxcpus=maxcpus指定最大热插拔cpu个数，PC up to 255
    
-numa ???

-watchdog model(旧接口)
    添加看门狗设备 ("-watchdog ?" 列出支持的设备)
    -ib700     基于ISA的看门狗设备
    -i6300esb  基于PCI的看门狗设备
    新接口：-device ib700|i6300esb


-device driver[,prop[=value][,...]]
    添加一个设备驱动（虚拟设备）
    -device ? 列出支持的虚拟设备
    -device ide-drive,? 列出对应虚拟设备支持的属性
    例：-device ide-drive,drive=mydisk1
    

-pflash:见-drive
-drive option[,option[,option[,...]]]
    定义一个驱动器，类型和参数请参考帮助文档
    例：-drive file=test.img,if=none,index=1,format=raw,id=mydisk1
    另外，可以使用drive在qemu系统总线添加cfi.pflash01设备（有别于-bios）：
    -drive file=/opt/OVMF.fd,if=pflash,format=raw,unit=0,readonly=on
    -drive file=/samba/system.img,format=qcow2,file.locking=off
-global driver.prop=value
    设置某类虚拟设备属性的默认值，特别用于配置机器类型默认创建设备的属性
    例：-global ide-drive.physical_block_size=4096
-no-frame:见-display sdl
-alt-grab:见-display sdl
-ctrl-grab:见-display sdl
-display type
替代-sdl、-curses、-vnc
    选择显示类型，用于处理显卡的输入，支持的类型有(不包含spice):
    sdl:Simple DirectMedia Layer, 开源|跨平台(封装windows的DirectX、封装linux的Xlib、mac)
    gtk: GIMP Toolkit,同样也支持windows和mac,使用不广, 它是Linux应用程序的主流图形库
    curses:
    egl-headless:
    vnc:
    none:
    可以分成:local displays(sdl|curses|cocoa|gtk)和remote displays(vnc|spice)两类
    参数-full_screen针对local displays
    支持多个display显示同一个显卡的输出，也可以显示不同显卡的输出
        sdl：为一个单独的图像窗口
        vnc：启动一个vnc server
        none：不显示显卡的输出数据，guest依然能看到显卡设备
        curses：有些显卡设备支持工作在文本模式（text mode，通常指VGA设备）
            调用curses库直接输出text，如果显卡工作在图像模式，那么什么都不会输出
    例1：-display vnc=127.0.0.1:1,id=primary
    例2：-display vnc=:2,id=secondary,display=video.2
-nographic
    禁用显卡同时重定向仿真的虚拟串口设备到宿主console
    
-vga type
    选择一个模拟的VGA卡，qemu只能配置一个设备，支持的类型有：
    cirrus： Cirrus Logic GD5446视频卡，windows全系支持，guest中应使用16位颜色深度
             最大分辨率为1024x768像素
    vmware：适用于vmware虚拟化平台时
    std：带有Bochs VBE扩展功能的标准VGA卡，VBE支持适用于高分辨率（windows支持）
         最高可测试2560x1600像素,后端可以使用spice
    qxl：半虚拟化图像卡，兼容VGA，Guest中安装qxl驱动后性能最佳
    none：Disable VGA card.

-chardev backend ,id=id [,mux=on|off] [,options]
    支持的后端字符设备有：
    null ,id=id:空设备，不发送任何数据，接收到的任何数据都会被丢弃
    socket,nodelay(对于write很小的数据,socket有优化可以合并后发送)
    udp,
    msmouse:
    vc:
    ringbuf: 用例:#qemu -chardev ringbuf,id=seabios,size=16k 之后使用(qmp)ringbuf_read/write读写
    file:
    pipe:
    console:
    serial:
    pty:
    stdio
    braille
    tty
    parallel
    parport
    spicevmc
    spiceport
    公共属性id="any string up to 127 characters"
    公共属性mux=on，激活多个前端（front-ends）复用一个字符设备模式
-monitor
    定义一个monitor,人机交互的窗口,例如: -monitor tcp:localhost:4444,server,nowait
                                         -monitor stdio
-qmp
    定一个json格式的交互接口,例如:-qmp telnet:localhost:4444,server,nowait
-mon
    用于取代-qmp和-monitor,需要指定一个chardev设备,例如:
    qemu [...] -chardev socket,id=mon1,host=localhost,port=4444,server,nowait,telnet
               -mon chardev=mon0,mode=readline -mon chardev=mon0,mode=readline

-boot [order=drives][,once=drives][,menu=on|off]
      [,splash=sp_name][,splash-time=sp_time]
      [,reboot-timeout=rb_timeout][,strict=on|off]
      
      order:可选值a, b (floppy 1 and 2)
                  c (first hard disk)*默认
                  d (first CD-ROM)
                  n-p (Etherboot from network adapter 1-4)
      once：首次启动从这引导,reboot后无效
      menu：当firmware/BIOS支持菜单时，可以打开菜单，默认是关闭的
      splash：传递24 BPP的jpeg或bmp真彩图片，依赖menu=on，依赖固件支持
               seabios支持，推荐分辨率320x240, 640x480, 800x640.
               图片显示时常为splash-time单位毫秒
      reboot-timeout：引导失败guest暂停rb_timeout(ms)然后尝试引导下个驱动器
                      如果都失败？？？
                      默认值为-1，表示引导失败后不重新引导
       strict=on表示严格按bootindex顺序引导(该值可动态修改)，默认是off
-no-acpi
    PC-target-machine-only,缺省会添加一个名为PIIX4_PM的PCI设备,设备干嘛用？？？
    acpiOS和Legacy切换(由全局变量SCI_EN值决定,SCI_EN=1表示ACPI模式，SCI_EN=0表示Legacy模式)
    FADT表提供了如下三个值：
    - SMI_CMD(IOport地址)
    - ACPI_ENABLE_VALUE
    - ACPI_DISABLE_VALUE
    s1.检查



    APM(isa)工作机制: 只暴露两个port
       - CNT_IOPORT:0xb2 控制端口，保存值同时调用回调函数

       - STS_IOPORT:0xb3 保存设备状态，允许guest修改.

-acpitable [sig=str][,rev=n][,oem_id=str][,oem_table_id=str][,oem_rev=n][,asl_compiler_id=str][,asl_compiler_rev=n][,data=file1[:file2]...]
           [file=file1[:file2]...]
  一张acpitable格式如下：
  (bytes) 0:3   4:7    8     9      10:15       16:23        24:27        28:31              32:35
        +-----+-----+-----+------+--------+--------------+---------+-----------------+------------------+------+
        | sig | len | rev | csum | oem_id | oem_table_id | oem_rev | asl_compiler_id | asl_compiler_rev | body |
        +-----+-----+-----+------+--------+--------------+---------+-----------------+------------------+------+
        - len: header+body总长度，规范限制65535
        - body: 可选的部分, header必须存在，因此每个acpitable >= 36字节
        - 其他字段内容可通过命令行指定，未指定则由QEMU提供默认值
  data指定文件其内容将以二进制方式复制到acpi-table-body中.
  如果以file方式指定acpitable,则header信息由file指定的文件前36字节内容提供(忽略命令行提供的header信息).
  refer:
    <stefanha> maqqieb: I don't know for sure but the qemu(1) man page suggests you always need a file: either to specify a full binary ACPI table (file=) or when you pass the header information on the command-line and just the payload in a file (data=).
    <stefanha> maqqieb: Also, this option seems to add an entire table.  If you just want to modify a specific entry in an existing table, then you may need to find another way.

-smbios file=binary  load SMBIOS entry from binary file
-smbios type=0[,vendor=str][,version=str][,date=str][,release=%d.%d]
              [,uefi=on|off]
                specify SMBIOS type 0 fields
-smbios type=1[,manufacturer=str][,product=str][,version=str][,serial=str]
              [,uuid=uuid][,sku=str][,family=str]
                specify SMBIOS type 1 fields
-smbios type=2[,manufacturer=str][,product=str][,version=str][,serial=str]
              [,asset=str][,location=str]
                specify SMBIOS type 2 fields
-smbios type=3[,manufacturer=str][,version=str][,serial=str][,asset=str]
              [,sku=str]
                specify SMBIOS type 3 fields
-smbios type=4[,sock_pfx=str][,manufacturer=str][,version=str][,serial=str]
              [,asset=str][,part=str][,max-speed=%d][,current-speed=%d]
                specify SMBIOS type 4 fields
-smbios type=11[,value=str][,path=filename]
                specify SMBIOS type 11 fields
-smbios type=17[,loc_pfx=str][,bank=str][,manufacturer=str][,serial=str]
               [,asset=str][,part=str][,speed=%d]
                specify SMBIOS type 17 fields
  SMBIOS又称为DMIBIOS：
  UEFI或BIOS向操作系统提供SMBIOS表,用于暴露主板和厂家信息,此后操作系统无需再去探测硬件(容易出错),
  SMBIOS规范描述表上各个字段，应用程序可从CIM服务或者SNMP服务获取配置表，或直接通过dmi接口(dmidecode)获取信息.
  所有SMBIOS表都有相同的Header部分, 如下：
  (bytes)  0      1      2:3    可变长度
        +------+-----+--------+----------+
        | type | len | handle |    ...   |"string1"+'\0'+"string2"+'\0'+ ... + "stringN"+'\0'+'\0'
        +------+-----+--------+----------+
         - type: [128~255] OEM-specific, [0~127]被规范使用见如下(缺省将使用bios提供的默认值):
             type0: BIOS Information  
             type1: System Information
             type3: System Enclosure
             type4: Processor Information
             type7: Cache Information            ...见SMBIOS规范...
             type9: System Slots
             type16: Physical Memory Array
             type17: Memory Device
             type19: Memory Array Mapped Address
             type32: System Boot Information
         - len: 表总长度单位字节，不同版本的SMBIOS表长不同，可扩展
         - handle: 
         表中string类型的字段关联的string直接紧接在表后用'\0'分隔开, 字符串集最后有一个附加的'\0',如上
         表种存放的是尾部字符串集索引
  EPS:以上表的地址和长度会记录到如下EPS结构中，BIOS通过匹配幻数查找到EPS结构(0xF0000~0xFFFFF, _SM_&_DMI_)
      (bytes) 0:3           16:19
           +------+------+--------+----------+
   32-EPS  | _SM_ |  ... | _DMI_  |    ...   |
           +------+------+--------+----------+

-bios file
      选择该Machine的fireware
      对于PC（piix | q35）的大部分版本默认是/usr/share/qemu-kvm/bios-256k.bin文件
-dump-vmstate <file>
    转存虚机的状态，状态是用Json格式描述,迁移前后可以保持虚机状态通过
    scripts/vmstate-static-checker.py对比虚机状态文件判断是否迁移出现异常
-no-reboot
    虚机重启，qemu进程直接退出
-no-shutdown
    虚机关机，qemu进程暂停
-msg timestamp=on
    配置后qemu-error相关的输出会显示时间戳(缺省为on)
--only-migratable
    启动后，如果配置了不支持迁移的设备会无法运行qemu
特定系统的参数：
-enablefips
    打开加密，没啥用
    
-net [user|tap|bridge|socket][,vlan=n][,option][,option][,...]
    弃用，见-netdev
-netdev DEV选择网络后端设备，取代旧的-net配置，支持的后端设备有：
    user:
    tap,id=str[,fd=h][,fds=x:y:...:z][,ifname=name][,script=file][,downscript=dfile]
        例,使用OVS启动虚机:
             -netdev tap,id=hostnet0,ifname=801012169218000,script=./ovs-ifup,downscript=./ovs-ifdown,vhost=on,vhostforce=on
             -device virtio-net-pci,netdev=hostnet0
        注：接口默认是DOWN的,可通过脚本自动启动script=/path/script.sh

    bridge,id=str[,br=br0][,helper=/usr/libexec/qemu-bridge-helper]
        和tap设备相似,但qemu-bridge-helper将其加到Linux Bridge设备上（不支持OVS）
        例:   -netdev bridge,id=hostnet0,br=br0
              -device e1000e,netdev=hostnet0
        注:   确保br0存在，然后添加acl规则开放权限，qemu自动会将tap加入或移除br0桥
              echo allow br0 > /etc/qemu-kvm/bridge.conf
    l2tpv3:
    socket:
    vhost-user:
    hubport:

-smb
    废弃使用，"Please use '-netdev user,smb=...' instead."
-daemonize
    QEMU初始化后将其作为后台服务，父进程变为1，并且释放当前控制台
    通过ps可以查看
-runas qemu
    qemu进程所属用户，通过ps可查看是属于哪个用户
-chroot /opt/lessons
    启动VM前改变更路径，初始化时root没有改变，通过/proc可查看
-incoming
    -incoming defer
        等待通过migrate_incoming指定迁移监听的URI，指定URI后，其他QEMU可以发起迁移
        如果没有指定参数“-incoming defer”，在执行migrate_incoming tcp:127.0.0.1:9999
        等命令时会提示For use with '-incoming defer'， 而无法监听迁移
-rtc
    配置RTC芯片，RTC一般由主板电池供电
    windows推荐配置：确保windows在引导时使用平台时钟
                    (cmd)bcdedit /set USEPLATFORMCLOCK on
                    -rtc base=localtime,clock=vm,driftfix=slew
    linux推荐配置：

Debug/Expert options:
-fw_cfg
-S：在启动时冻结CPU，需要通过hmp命令“c”来恢复运行
-d xxx,yyy 
    记录一些专用调试日志输出，-d help可以查看支持输出哪些记录,逗号分隔
-pidfile file:
    例1：-pidfile /opt/myqemu.pid QEMU进程PID值会被写到文件中
-s：shorthand for -gdb tcp::1234
-gdb dev，等待gdb连接，#(gdb) target remote localhost:1234可以debug guest代码
          调试符号可以由gdb客户端添加。

其他：
-enable-fips 安全相关的




常用命令：
1. 运行cirros-img系统，获取root权限（#sudo su -）：
#echo allow br-int > /etc/qemu-kvm/bridge.conf
#qemu-system-x86_64 \
    -nographic \
    -device virtio-net-pci,netdev=net0,id=net0 \
    -netdev bridge,id=net0,br=br-int \
    -netdev type=tap,id=net0,ifname=801012169218000,script=/sf/etc/kvm/ovs-ifup,downscript=/etc/ovs-ifdown,vhost=on,vhostforce=on
    cirros.img




LC_ALL=C \
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
HOME=/var/lib/libvirt/qemu/domain-7-vm \
XDG_DATA_HOME=/var/lib/libvirt/qemu/domain-7-vm/.local/share \
XDG_CACHE_HOME=/var/lib/libvirt/qemu/domain-7-vm/.cache \
XDG_CONFIG_HOME=/var/lib/libvirt/qemu/domain-7-vm/.config \
QEMU_AUDIO_DRV=none \
QEMU_AUDIO_TIMER_PERIOD=125 \
/opt/lessons/qemu-system-x86_64 \
-name guest=vm,debug-threads=on \
-machine pc-i440fx-2.11,accel=kvm,usb=off,dump-guest-core=off,mem-merge=off \
-cpu host,kvm=off \
-m size=3301376k,slots=8,maxmem=268435456k \
-realtime mlock=off \
-smp 4,sockets=1,cores=4,threads=1 \
-numa node,nodeid=0,cpus=0-3,mem=3224 \
-uuid 535b4f21-9ed0-42a2-be94-0ccac09ced76 \
-no-user-config \
-nodefaults \
-rtc base=localtime,clock=vm,driftfix=slew \
-global kvm-pit.lost_tick_policy=delay \
-no-hpet \
-global PIIX4_PM.disable_s3=1 \
-global PIIX4_PM.disable_s4=0 \
-boot menu=off,strict=on \
-device piix3-usb-uhci,id=usb,bus=pci.0,addr=0x1.0x2 \
-device virtio-serial-pci,id=virtio-serial0,bus=pci.0,addr=0x5 \
-cpu host,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,kvm=off,hv_vendor_id=ruijienet_vm \
-bios /usr/share/qemu-kvm/seabios.bin \
-smbios type=0,vendor=RuiJie,version=1 \
-smbios type=1,manufacturer=RuiJie,product=ruijie,version=1,serial=ruijie01,family=RG-RCD,uuid=00000000-0000-0000-0000-000000000000 \
-smbios type=2,manufacturer=RuiJie,product=ruijie,serial=ruijie01,version=1 \
-smbios type=3,manufacturer=RuiJie,serial=ruijie01,version=1 \
-smbios type=17,manufacturer=RuiJie \
-sandbox off \
-vga none \
-msg timestamp=on \
-device usb-tablet \
-netdev user,id=net1 \
-device e1000e,netdev=net1,bus=pci.0,addr=0x10 \
-global i440FX-pcihost.allow-hotplug=false \
-spice port=5901,addr=0.0.0.0,plaintext-channel=default,seamless-migration=on \
-vnc 0.0.0.0:0 \
-device vfio-pci,host=00:02.0,id=hostdev0,bus=pci.0,addr=0x2 \
/opt/lessons/win10_clean.img

-device qxl-vga,id=video2,ram_size=134217728,vram_size=67108864,vram64_size_mb=0,max_outputs=1,addr=0x14,bus=pci.0,addr=0x2 \

-device qxl,id=video1,ram_size=134217728,vram_size=67108864,vram64_size_mb=0,max_outputs=1,addr=0x14,device-id=0x0100 \
-device qxl-vga,id=video0,ram_size=134217728,vram_size=67108864,vram64_size_mb=0,max_outputs=1,addr=0x2,device-id=0x0100 \

<qemu:arg value='-device'/>
<qemu:arg value='qxl,id=video1,ram_size=134217728,vram_size=67108864,vram64_size_mb=0,max_outputs=1,addr=0x14,device-id=0x0101'/>

i440FX-pcihost: add 'allow-hotplug' property for configuring whether to expose the
BSEL to the guest

qemu-img
  amend   #qemu-img amend -o compat=1.1 /opt/test.qcow2,镜像属性信息修改.
  bench   #qemu-img bench -w /opt/test.qcow2,基本读写性能测试，默认是读，-w指定为写(覆盖数据).
  check   #qemu-img check /opt/test.qcow2,一致性检测，检查镜像是否有“泄漏”或者“错误”
    -r leaks|all  leaks:表示只修复泄漏的存储空间
                  all:修复泄漏同时也会尝试修复错误(可能隐藏已发生的腐败)
  commit  #qemu-img commit /opt/test.qcow2 #将test.qcow2的修改提交到上一级的backing file中
  compare #qemu-img compare demo1.img demo2.img,对比两个镜像的内部数据,大小不相等会有警告，只比较公共部分.
  convert #qemu-img convert --target-is-zero -n -S 65536 -t writethrough -f qcow2 -O raw /opt/test.qcow2 /dev/sdb,镜像格式转换
     -t cache, 目标镜像使用cache类型,可选cache类型见注释A
     -T cache, 源镜像使用cache类型,可选cache类型见注释A
     -n, convert默认会自动创建目标镜像文件，显式禁用后必须提前创建目标镜像
     --target-is-zero -S 65536 -n, 若已知目标镜像为全0,可实现写0优化,-S指定0检测的基本单位(字节)
  create  #qemu-img create -f qcow2 /opt/test.qcow2 40g,创建一个新的镜像文件.
  dd      #qemu-img dd if=demo1.img –O qcow2 of=demo2.img bs=512 count=1,和dd命令类似，用于数据拷贝
  info    #qemu-img info /opt/test.qcow2,查询指定镜像的信息.
  resize  #qemu-img resize /opt/test.qcow2 100g,修改镜像大小,镜像大小是镜像的最基本属性.(一般用于扩容)
  map     #qemu-img map demo.img,查看用户数据映射到哪个文件的哪个位置(backingfile)
  rebase  #qemu-img rebase –b new.base demo.img,修改qcow2的backingfile,更换后demo.img内容不改变
  measure #qemu-img measure -O qcow2 demo.img,返回两个值:
    "required": 42949672960, 表示转换后文件大小
    "fully-allocated": 42949672960, 目标镜像的最大大小
  snapshot 指定的内部快照
    -c snapshot-name,创建快照#qemu-img snapshot -c snapshot01 demo.qcow2
    -l 查看镜像内部快照列表  #qemu-img snapshot -l demo.qcow2
    -a snapshot-name,还原快照#qemu-img snapshot -a snapshot01 demo.qcow2 
    -d snapshot-name,删除快照#qemu-img snapshot -d snapshot01 demo.qcow2
  

注释A - cache类型：
 posix提供三种同步IO:
 - O_SYNC linux只实现了O_SYNC,意味着写操作会将数据和所有关联的元数据FLUSH到基础硬件后返回成功。
 - O_DSYNC glibc直接映射O_DSYNC到O_SYNC,原语义是只要FLUSH数据部分而忽略元数据部分
 - O_RSYNC glibc直接映射O_RSYNC到O_SYNC,O_RSYNC需要同时和O_SYNC或O_DSYNC使用，表示读取时才写入.

 linux提供文件描述符状态:
 - O_DIRECT 表示禁用page-cache机制.
 - O_SYNC 一般结合O_DIRECT|O_SYNC使用，保证整个文件IO同步

 - off|none, O_DIRECT, 块设备支持flush，IO提交到队列后返回成功,依赖guest执行flush
 - directsync,  O_DIRECT|O_DSYNC，IO直接提交到队列并等待完成后返回成功
 - writethrough,  O_DSYNC，写数据到磁盘后返回成功
 - writeback, 使用缓存且不sync，通知来宾的存储控制器存在写缓存，从而允许使用flush命令
 - unsafe, 与writeback相似,但是unsafe忽略任何flush命令（由来宾存储控制器生成）

refer: https://documentation.suse.com/sles/11-SP4/html/SLES-all/cha-qemu-cachemodes.html


常用命令
1. 
[20:07] <damo22> karrq: i use this:   -net user,hostfwd=tcp::8888-:22 -net nic
[20:08] <damo22> then i can shell into the box on localhost:8888
