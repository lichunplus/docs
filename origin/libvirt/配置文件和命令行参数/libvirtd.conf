# Master libvirt daemon configuration file
#
# For further information consult http://libvirt.org/format.html
#
# NOTE: the tests/daemon-conf regression test script requires
# that each "PARAMETER = VALUE" line in this file have the parameter
# name just after a leading "#".

#################################################################
#
# 网络连接控制部分
#
# 
# 标志是否监听tls加密的tcp端口，必须先设置CA,并颁发证书（参数--listen必须传递）
listen_tls = 0
tls_port = "16514"
# 标志是否监听未加密的tcp端口，必须先设置CA,并颁发证书（参数--listen必须传递）
listen_tcp = 1
tcp_port = "16509"
# 监听的接口
listen_addr = "0.0.0.0"

# 默认不激活mdns_name，开启后使用mdns_name
#mdns_adv = 1
# 默认为"Virtualization Host HOSTNAME"
#mdns_name = "Virtualization Host Joe Demo"

#################################################################
#
# UNIX socket 访问控制
# 权限控制
#unix_sock_group = "libvirt"
#unix_sock_ro_perms = "0777"
#unix_sock_rw_perms = "0770"
#unix_sock_admin_perms = "0700"
# 存放unix socket文件(libvirt-admin-sock、libvirt-sock、libvirt-sock-ro等)
# unix_sock_dir = "/var/run/libvirt"

#################################################################
#
# 认证.
#
# 支持的列表有：none sasl polkit.
#auth_unix_ro = "none"
#auth_unix_rw = "none"
#auth_tcp = "none"
#auth_tls = "none"


# 默认是'nop' 
#access_drivers = [ "polkit" ]

#################################################################
#
# TLS x509 证书配置
# 密钥文件路径
#key_file = "/etc/pki/libvirt/private/serverkey.pem"
# 证书文件路径
#cert_file = "/etc/pki/libvirt/servercert.pem"
# CA证书路径
#ca_file = "/etc/pki/CA/cacert.pem"

# 默认不使用CRL
#crl_file = "/etc/pki/CA/crl.pem"

#################################################################
#
# Authorization controls
#


# Flag to disable verification of our own server certificates
#
# When libvirtd starts it performs some sanity checks against
# its own certificates.
#
# Default is to always run sanity checks. Uncommenting this
# will disable sanity checks which is not a good idea
#tls_no_sanity_certificate = 1

# Flag to disable verification of client certificates
#
# Client certificate verification is the primary authentication mechanism.
# Any client which does not present a certificate signed by the CA
# will be rejected.
#
# Default is to always verify. Uncommenting this will disable
# verification - make sure an IP whitelist is set
#tls_no_verify_certificate = 1


# A whitelist of allowed x509 Distinguished Names
# This list may contain wildcards such as
#
#    "C=GB,ST=London,L=London,O=Red Hat,CN=*"
#
# See the POSIX fnmatch function for the format of the wildcards.
#
# NB If this is an empty list, no client can connect, so comment out
# entirely rather than using empty list to disable these checks
#
# By default, no DN's are checked
#tls_allowed_dn_list = ["DN1", "DN2"]


# A whitelist of allowed SASL usernames. The format for username
# depends on the SASL authentication mechanism. Kerberos usernames
# look like username@REALM
#
# This list may contain wildcards such as
#
#    "*@EXAMPLE.COM"
#
# See the POSIX fnmatch function for the format of the wildcards.
#
# NB If this is an empty list, no client can connect, so comment out
# entirely rather than using empty list to disable these checks
#
# By default, no Username's are checked
#sasl_allowed_username_list = ["joe@EXAMPLE.COM", "fred@EXAMPLE.COM" ]


# Override the compile time default TLS priority string. The
# default is usually "NORMAL" unless overridden at build time.
# Only set this is it is desired for libvirt to deviate from
# the global default settings.
#
#tls_priority="NORMAL"


#################################################################
#
# 进程控制
#
# libvirtd-SERVER相关的配置，可通过virt-admin修改
#min_workers = 5                  #minWorkers，启动时创建的线程
#max_workers = 20                 #maxWorkers， 最大线程池数量
#prio_workers = 5                 #prioWorkers， 优先级线程池数量
#max_clients = 100                #nclients_max， 最大连接客户端数量
                                  超过数量后新的客户端请求被阻塞，直到有资源时才响应
                                  
#max_anonymous_clients = 20       #nclients_unauth_max， 最大匿名客户端数量
#max_client_requests = 5          #单个client支持的请求并发数量
#max_queued_clients = 1000        #client连接请求排队，某些协议支持

# admin-SERVER相关的配置，可通过virt-admin修改
#admin_min_workers = 1            #minWorkers，启动时创建的线程
#admin_max_workers = 5            #maxWorkers， 最大线程池数量
                                  超过数量后新的客户端请求被阻塞，直到有资源时才响应
                                  
                                  #prioWorkers， 优先级线程池数量，固定为0
#admin_max_clients = 5            #nclients_max，最大连接客户端数量
                                  #nclients_unauth_max， 最大匿名客户端数量,固定为0
#admin_max_client_requests = 5    #单个client支持的请求并发数量
#admin_max_queued_clients = 5     #client连接请求排队，某些协议支持

#max_requests = 20 #未使用到，请使用max_client_requests配置
#################################################################
#
# 日志
#
# 级别: 4 errors, 3 warnings, 2 information, 1 debug
# 后端: x:stderr            #输出到STDERR
        x:syslog:name       #输出到SYSLOG,NAME是标识名称
        x:file:file_path    #输出到文件中
        x:journald          #journald日志系统
log_level = 3  #默认日志级别，其他级别可以通过log_filters修改
#log_outputs="3:syslog:libvirtd"    #多个输出使用空格分离
log_outputs = "1:file:/var/log/libvirt/libvirtd.log"

# 过滤器:
#    x:name     #不激活堆栈输出
#    x:+name    #激活堆栈输出
#      name可以过滤源码中 VIR_LOG_INIT()获取
#      e.g., "remote", "qemu", or "util.json" (可以是子字符串)
# e.g. to only get warning or errors from the remote layer and only errors
# from the event layer:
#log_filters="4:remote 3:event"    #多个输出使用空格分离


# 即将移除的配置，请使用log_outputs/log_filters替代
#log_buffer_size = 64
##################################################################
#
# Auditing
#
# This setting allows usage of the auditing subsystem to be altered:
#
#   audit_level == 0  -> 禁用审计功能
#   audit_level == 1  -> 根据Host决定是否使用审计功能（默认）
#   audit_level == 2  -> 强制使用审计功能，Host不支持时异常libvirtd退出
#audit_level = 2
#
# 默认为0，不将审计数据记录到日志文件中
#audit_logging = 1

###################################################################
#  host UUID:
# 支持
# - 'smbios': 通过'dmidecode -s system-uuid'获取，若dmidecode不存在则随机生成个
# - 'machine-id': 通过/etc/machine-id获取
#host_uuid_source = "smbios" #默认是smbios
# 这个配置作用？？？
#host_uuid = "00000000-0000-0000-0000-000000000000"

###################################################################
# Keepalive protocol:
# 这允许libvirtd检测无法到达的客户端.
# 在keepalive_interval秒不活动后，将keepalive消息发送到客户端，
# 以检查客户端是否仍在响应keepalive_count是无法联系的最大人数
# 当keepalive_interval == 0 ,如果没有keepalive messages，keepalive_count后将连接关闭
# 当keepalive_interval == -1, libvirtd不会发送keepalive请求;
#keepalive_interval = 5
#keepalive_count = 5
# Keepalive settings for the admin interface
#admin_keepalive_interval = 5
#admin_keepalive_count = 5
#
# 不要使用下面参数了
#
#keepalive_required = 1
#admin_keepalive_required = 1

###################################################################
# Open vSwitch:
#
#ovs_timeout = 5
