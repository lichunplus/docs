*.c        *.i        *.s      *.o        app
    预处理  ->  编译  ->  汇编  ->  链接
gprof (display call graph profile data)
    s1. gcc -pg main.c 加-pg
    s2. ./a.out 生成gmon.out文件
    s3  gprof a.out gmon.out
gcov (coverage testing tool)
    s1. gcc -fprofile-arcs -ftest-coverage main.c 加两个参数，生成main.gcno
    s2. ./a.out 生成main.gcda文件（gcno和gcda是gcov引用的关键文件）
    s3. gcov main.c 生成main.c.gcov显示每个函数调用情况
    
gcc (GNU project C and C++ compiler)
    #gcc -S a.c (预处理->编译)
    #gcc -c a.c (预处理->编译->汇编)
    #gcc main.c -DCONFIG_QEMU_CONFDIR=\"/opt/lessons\"  (外部宏定义)

    #gcc a.c -o app (预处理->编译->汇编->链接)
    
as (the portable GNU assembler)
    将汇编源码翻译成机器指令
    #as a.s -o a.o (汇编)
    #gcc -c a.s -o a.o等价命令
    
ld (The GNU linker)
    将多个目标文件链接起来，符号_start在某个文件中，为程序入口
    #ld a.o [b.o c.o] -o app (链接)
    #gcc a.o [b.o c.o] -o app 等价命令
nm (list symbols from object files)
    #nm app (查看symbols)
strip (Discard symbols from object files)
    #strip app (删除symbols)
    #file a.out 查看
size (list section sizes and total size)
    #size  a.out 
    text    data     bss     dec     hex filename
    1143     540       4    1687     697 a.out
    
objdump (display information from object files)
    #objdump -D a.out > a.info
    
readelf (Displays information about ELF files)
    #readelf -a a.out
elfedit (Update the ELF header of ELF files)
    #...
strings (print the strings of printable characters in files)
    查找任意类型文件的字符串
    #strings a.out

c++/g++/c++filt/cpp(略)
    
addr2line (address to line)
    s1. 运行错误程序,./a.out
        1 #include <string.h>
        2 int main()
        3 {
        4     int a;
        5     a = 100/0;
        6 }
    s2. dmesg查看错误的ip地址
        trap divide error ip:400571 sp:7ffd09d95470 error:0 in a.out
    s3 地址转行号
    # addr2line -e /opt/openwrt/a.out 400571
    /opt/openwrt/main.c:5
    
ar (create, modify, and extract from archives)
    # ar -r libabc.a a.o 添加a b c d
    # ar -r libabc.a b.o c.o d.o
    # ar -d libabc.a d.o 删除d
    # ar -t libabc.a 查看
    a.o
    b.o
    c.o
    
ranlib (generate index to archive)
    unix需要ranlib这步，linux已经集成到ar中因此可以忽略
    